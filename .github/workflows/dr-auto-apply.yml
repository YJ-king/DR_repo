name: DR Terraform Apply

on:
  workflow_dispatch:  # ‚úÖ ÏàòÎèô Ïã§ÌñâÏö© (ÎÇòÏ§ëÏóê Cloud RunÏóêÏÑú APIÎ°ú Ìò∏Ï∂ú Í∞ÄÎä•)

jobs:
  terraform-apply:
    name: Terraform Apply on AWS
    runs-on: ubuntu-latest

    permissions:
      id-token: write   # ‚úÖ GitHub OIDCÎ•º ÏúÑÌï¥ ÌïÑÏöî
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::723165663216:role/github-actions-terraform-role
          aws-region: ap-northeast-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform -chdir=infra/dr_terraform/envs init

      - name: Terraform Apply
        run: terraform -chdir=infra/dr_terraform/envs apply -auto-approve

      - name: Get RDS endpoint and inject was yaml
        shell: bash
        run: |
          echo "üîß Running terraform and extracting clean value"
    
          TF_RAW=$(terraform -chdir=infra/dr_terraform/envs output -raw rds_endpoint 2>/dev/null || echo "")
    
          RDS_ENDPOINT=$(echo "$TF_RAW" | grep -Eo '^[a-z0-9.-]+\.rds\.amazonaws\.com:3306$')

          if [[ -z "$RDS_ENDPOINT" ]]; then
            echo "‚ùå Failed to extract RDS endpoint from: [$TF_RAW]"
            exit 1
          fi

          echo "üìå Clean RDS: $RDS_ENDPOINT"

          sed -i "s|<RDS_ENDPOINT>|$RDS_ENDPOINT|g" was/was-deployment.yaml

          echo "‚úÖ Injection complete. Verifying:"
          grep "$RDS_ENDPOINT" was/was-deployment.yaml || echo "‚ö†Ô∏è Not found"


      - name: Install dependencies (kubectl, awscli, helm)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl unzip git apt-transport-https ca-certificates gnupg lsb-release jq

          # AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf awscliv2.zip aws

          # kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Connect to EKS
        run: |
          aws eks update-kubeconfig --region ap-northeast-2 --name drb-eks-cluster

      - name: Get EKS Node Role ARN
        id: node_role
        run: |
          echo "NODE_ROLE_ARN=$(terraform -chdir=infra/dr_terraform/envs output -raw eks_node_role_arn)" >> "$GITHUB_ENV"

      - name: Generate aws-auth.yaml
        run: bash scripts/gen-aws-auth.sh
        env:
          NODE_ROLE_ARN: ${{ env.NODE_ROLE_ARN }}


      - name: Apply aws-auth.yaml
        run: |
          kubectl apply -f infra/dr_terraform/envs/aws-auth.yaml

      - name: Install ALB Controller CRDs
        run: |
          kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"

      - name: Install ALB Controller with Helm
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=drb-eks-cluster \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=ap-northeast-2 \
            --set vpcId=$(aws eks describe-cluster --name drb-eks-cluster --region ap-northeast-2 --query "cluster.resourcesVpcConfig.vpcId" --output text) \
            --set image.repository=602401143452.dkr.ecr.ap-northeast-2.amazonaws.com/amazon/aws-load-balancer-controller

      - name: Deploy Web & WAS YAMLs
        run: |
          kubectl apply -f web/
          kubectl apply -f was/

